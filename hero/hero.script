-- local timer = require "timer"

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- the acceleration to move right/left
local move_acceleration = 3500
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 400
-- gravity pulling the player down in pixel units
local gravity = -1100
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 700
-- time within a double tap must occur to be considered a jump (only used for mouse/touch controls)
local touch_jump_timeout = 0.2
local first_jump_animation = false
local first_fall_animation = false
-- to ignore inut keys on time doublejump animation
local double_jump_animation = false
local double_fall_animation = false
-- to ignore inut keys on time acceleration animation
local acceleration_animation = false
-- local fire_sx = 0

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
--local msg_animation_done = hash("animation_done")
local group_geometry = hash("geometry")
local input_left = hash("left")
local input_right = hash("right")
local input_lshift = hash("acceleration")
local input_jump = hash("jump")
local input_hit = hash("hit")
--local input_touch = hash("touch")
local anim_run = hash("run")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_double_jump = hash("double_jump")
local anim_fall = hash("fall")
local anim_acceleration = hash("acceler")

function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	msg.post("#sprite_fire", "disable")

	local rotation = vmath.quat_rotation_z(math.pi / 0.5)
	local scale = 1
	local props = {
--		hero_weapon = true,
		diff_position = vmath.vector3((go.get("#sprite", "size.x") / 2) * 0.7, go.get("#sprite", "size.y") / 2, 0),
		weapon_id = hash("sword2")
	}

	self.weapon = factory.create("#weaponfactory", go.get_position(), rotation, props, scale)
-- 	fire_sx = go.get("#sprite_fire", "size.x")

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- movement input in the range [-1,1]
	self.move_input = 0
	-- character direction, for anim selection (-1 or 1)
	self.direction = 1
	self.previous_direction = 0
	-- the currently playing animation
	self.anim = nil
	self.anim_fire = nil
	-- timer that controls the jump-window when using mouse/touch
	self.touch_jump_timer = 0
	self.jump_animation = true
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		msg.post("#sprite", "play_animation", {id = anim})
		-- remember which animation is playing
		self.anim = anim
	end
end

local function play_animation_fire(self, anim)
	-- only play animations which are not already playing
	if self.anim_fire ~= anim then
		-- tell the sprite to play the animation
		-- msg.post("#sprite_fire", "enable")
		-- msg.post("#sprite_fire", "play_animation", {id = anim})
		-- remember which animation is playing
		self.anim_fire = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	if self.previous_direction ~= self.direction then
		sprite.set_hflip("#sprite", self.direction < 0)
		msg.post(self.weapon, "change_direction", {new_direction = self.direction})
		self.previous_direction = self.direction
	end
	-- make sure the right animation is playing
	if self.ground_contact and not first_jump_animation and not first_fall_animation
		and not double_jump_animation then
		if self.jump_animation == true then
			self.jump_animation = false
			msg.post(self.weapon, "jump", {start = self.jump_animation})
		end
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_run)
		end
	else
		if self.jump_animation == false then
			self.jump_animation = true
			msg.post(self.weapon, "jump", {start = self.jump_animation})
		end
		if self.velocity.y > 0 then
			if double_jump_animation then
				play_animation(self, anim_double_jump)
			else
				play_animation(self, anim_jump)
			end
		else
            if (first_jump_animation) then
                first_jump_animation = false
                first_fall_animation = true
            elseif double_jump_animation then
                double_jump_animation = false
                double_fall_animation = true
            end
            play_animation(self, anim_fall)
		end
	end
	if acceleration_animation then
		sprite.set_hflip("#sprite_fire", self.direction > 0)
		play_animation_fire(self, anim_acceleration)
	end
end

function update(self, dt)
	-- determine the target speed based on input
	local acceleration_diff = 1
	if acceleration_animation then
		acceleration_diff = 7
	end
	local target_speed = self.move_input * max_speed
	-- calculate the difference between our current speed and the target speed
	local speed_diff = target_speed - self.velocity.x
	-- the complete acceleration to integrate over this frame
	local acceleration = vmath.vector3(0, gravity, 0)
	if speed_diff ~= 0 then
		-- set the acceleration to work in the direction of the difference
		if speed_diff < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
		-- decrease the acceleration when air-borne to give a slower feel
		if not self.ground_contact then
			acceleration.x = air_acceleration_factor * acceleration.x
		end
	end
	-- calculate the velocity change this frame (dv is short for delta-velocity)
	local dv = acceleration * dt
	-- check if dv exceeds the intended speed difference, clamp it in that case
	if math.abs(dv.x) > math.abs(speed_diff) then
	-- if math.abs(dv.x) > math.abs(ggg) then
		dv.x = speed_diff
	end
	-- save the current velocity for later use
	-- (self.velocity, which right now is the velocity used the previous frame)
	local v0 = self.velocity
	-- calculate the new velocity by adding the velocity change
	self.velocity = self.velocity + dv
	-- calculate the translation this frame by integrating the velocity
	local dp = (v0 + self.velocity) * dt * 0.5
	dp.x = dp.x * acceleration_diff
	-- apply it to the player character

	msg.post(self.weapon, "hero_position", {position = go.get_position()})

	go.set_position(go.get_position() + dp)

	-- update the jump timer
	if self.touch_jump_timer > 0 then
		self.touch_jump_timer = self.touch_jump_timer - dt
	end

	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.move_input = 0
	self.ground_contact = false

end

local function handle_geometry_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
--		msg.post(self.weapon, "jump", {start = false})
		self.ground_contact = true
        first_jump_animation = false
        first_fall_animation = false
        double_jump_animation = false
        double_fall_animation = false
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider geometry
		if message.group == group_geometry then
			handle_geometry_contact(self, message.normal, message.distance)
		end
--	elseif message_id == hash("get_position") then
--		print(444)
--		msg.post(sender, "hero_position", {position = go.get_position()})
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
	end
end

local function double_jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
-- 	if self.ground_contact then
		-- set take-off speed
	self.velocity.y = jump_takeoff_speed
		-- play animation
	play_animation(self, anim_double_jump)
-- 	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
-- 		play_animation(self, anim_fall)
	end
end

function on_input(self, action_id, action)
	if not acceleration_animation or (action_id == input_right and action.released) or (action_id == input_left and action.released) then
		if action_id == input_left and not action.released then
			self.move_input = -action.value
			self.direction = -1
			if self.ground_contact then
				msg.post(self.weapon, "running", {start = true})
			end
		elseif action_id == input_left and action.released then
			msg.post(self.weapon, "running", {start = false})
		elseif action_id == input_right and not action.released then
			self.move_input = action.value
			self.direction = 1
			if self.ground_contact then
				msg.post(self.weapon, "running", {start = true})
			end
		elseif action_id == input_right and action.released then
			msg.post(self.weapon, "running", {start = false})
		elseif action_id == input_lshift and action.pressed then
			if not double_jump_animation and self.velocity.x ~= 0 then
				msg.post(self.weapon, "acceleration", {start = true})
				acceleration_animation = true
				msg.post("#sprite_fire", "enable")
				timer.seconds(0.3, function(self, id)
					msg.post(self.weapon, "acceleration", {start = false})
					msg.post("#sprite_fire", "disable")
					acceleration_animation = false
				end)
			end
		elseif action_id == input_jump then
            if action.pressed then
                if not double_jump_animation and not double_fall_animation then
--					msg.post(self.weapon, "jump", {start = true})
					if first_jump_animation or first_fall_animation then
                        first_jump_animation = false
                        first_fall_animation = false
                        double_jump_animation = true
                        -- TODO run doublejump
                        double_jump(self)
                    else
                        first_jump_animation = true
                        jump(self)
                    end
                end
            elseif action.released then
                abort_jump(self)
            end
            --		elseif action_id == input_touch then
--			-- move towards the touch-point
--			local diff = action.x - go.get_position().x
--			-- update direction
--			if diff > 0 then
--				self.direction = 1
--			else
--				self.direction = -1
--			end
--			-- only give input when far away (more than 10 pixels)
--			if math.abs(diff) > 10 then
--				-- slow down when less than 100 pixels away
--				self.move_input = diff / 100
--				-- clamp input to [-1,1]
--				self.move_input = math.min(1, math.max(-1, self.move_input))
--			end
--			if action.released then
--				-- start timing the last release to see if we are about to jump
--				self.touch_jump_timer = touch_jump_timeout
--			elseif action.pressed then
--				-- jump on double tap
--				if self.touch_jump_timer > 0 then
--					jump(self)
--				end
--			end
		elseif action_id == input_hit and action.pressed then
			msg.post(self.weapon, "hit")
		end
	end
end
