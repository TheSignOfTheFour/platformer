local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local COLLISION_RESPONSE = hash("collision_response")
local BESTIARY_ATTACK_RANGE = hash("bestiary_attack_range")
local HERO = hash("hero")

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
    self.direction = -1
    self.previous_direction = nil

--    self.collision_object_diff = vmath.vector3((go.get("#sprite", "size.x") / 2) * 0.2, 0, 0.08);

--    local pos = go.get_position()

    timer.seconds(5, function(self, id)
        self.direction = 1
        go.set_position(go.get_position() + vmath.vector3(300, 0, 0))
    end)

--    self.collision_obj = factory.create("#green_troll_collision_factory",  pos, nil, {}, 1)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

local function update_animations(self)
    if self.previous_direction ~= self.direction then
        sprite.set_hflip("#sprite", self.direction < 0)
        if self.direction < 0 then
            msg.post("#collisionobject_left", "disable")
            msg.post("#collisionobject_right", "enable")
            --            self.collision_object_diff.x = math.abs(self.collision_object_diff.x)
        else
            msg.post("#collisionobject_left", "enable")
            msg.post("#collisionobject_right", "disable")

--            self.collision_object_diff.x = -1 * math.abs(self.collision_object_diff.x)
        end
        self.previous_direction = self.direction
    end
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed

--    go.set(self.collision_obj, "position", go.get_position() + self.collision_object_diff)

    update_animations(self)
end

local function play_animation(self, anim)
    -- only play animations which are not already playing
    if self.anim ~= anim then
        -- tell the sprite to play the animation
        msg.post("#sprite", "play_animation", {id = anim})
        -- remember which animation is playing
        self.anim = anim
    end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
    if message_id == CONTACT_POINT_RESPONSE then
        -- check that the object is something we consider geometry
        if message.group == HERO then
            play_animation(self, hash("attack"))
--            handle_geometry_contact(self, message.normal, message.distance)
        end
--        if message.group == BESTIARY then
--            local proj = vmath.dot(self.correction, message.normal)
--            local comp = (message.distance - proj) * message.normal
--            self.correction = self.correction + comp
--            go.set_position(go.get_position(id) + comp)
--            proj = vmath.dot(self.velocity, message.normal)
--            if proj < 0 then
--                self.velocity = self.velocity - proj * message.normal
--            end
--        end
    elseif message_id == COLLISION_RESPONSE then
        if message.group == HERO then
        end

    end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
