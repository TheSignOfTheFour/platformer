go.property("diff_position", vmath.vector3(0, 0, 0)) -- diff for character weapn
go.property("weapon_id", hash("sword"))
--go.property("direction", 1)

local function disable_all_sprites()
	msg.post("#sword", "disable")
	msg.post("#sword2", "disable")
	msg.post("#axespinemodel", "disable")
	msg.post("#swordspinemodel", "disable")
	msg.post("#sword2spinemodel", "disable")
end

local function init_weapon(self)
	self.weapon_stats = {
		[hash("axe")] = { damage = 10, range = 30, firerate = 3, fire_anim="pistol_fire", url = msg.url("#axespinemodel") },
		[hash("sword")] = { damage = 10, range = 30, firerate = 3, fire_anim="pistol_fire", url = msg.url("#swordspinemodel") },
		[hash("sword2")] = { damage = 50, range = 15, firerate = 1,  fire_anim="shotgun_fire", url = msg.url("#sword2spinemodel") },
	}
end

function init(self)
	self.direction = 1
	self.hit_animation = false
	self.idle_animation = true
	self.disheveled_animation = false
	self.running_animation = false
	self.jump_animation = false
	self.timer = nil
	init_weapon(self)
	disable_all_sprites()
	msg.post(self.weapon_stats[self.weapon_id].url, "enable")
	-- Add initialization code here
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

local function change_rotation(self)
	local tempDirection = self.direction
	if (self.idle_animation or self.running_animation or self.jump_animation) and not self.disheveled_animation then
		tempDirection = self.direction * -1
	end
	local diff_property = go.get(msg.url(), "diff_position")
	if tempDirection > 0 then
		local rotatio = vmath.quat_rotation_y(3.141592653);
		go.set_rotation(rotatio, self.weapon_stats[self.weapon_id].url)
		diff_property.x = math.abs(diff_property.x)
	else
		local rotatio = vmath.quat_rotation_y(0);
		go.set_rotation(rotatio, self.weapon_stats[self.weapon_id].url)
		diff_property.x = -1 * math.abs(diff_property.x)
	end
	go.set(msg.url(), "diff_position", diff_property)
end

local function anim_idle(self)
	if not self.jump_animation then
		self.idle_animation = true
		if self.disheveled_animation then
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "disheveled", go.PLAYBACK_LOOP_FORWARD)
		else
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "idle", go.PLAYBACK_LOOP_FORWARD)
		end

	end
end

local function refresh_dicheveld_timer(self)
	if self.timer then
		timer.cancel(self.timer)
	end
	self.disheveled_animation = true
	self.timer = timer.seconds(7, function(self)
		self.disheveled_animation = false
		anim_idle(self)
		change_rotation(self)
	end)
end

--local function change_direction(self)
----	local rotation = go.get_rotation(self.weapon_stats[self.weapon_id].url)
--	local new_direction = 1
--	if self.direction > 0 then
--		new_direction = -1
--	end
--	msg.post(msg.url(), "change_direction", {new_direction = new_direction})
--end

local function anim_hit_done(self)
	self.idle_animation = true
	self.hit_animation = false
	anim_idle(self)
	change_rotation(self)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("hero_position") then
 		go.set_position(message.position + self.diff_position)
	elseif message_id == hash("change_direction") then
--		go.set(msg.url(), "direction", message.new_direction)
		self.direction = message.new_direction
		change_rotation(self)
	elseif message_id == hash("acceleration") then
		self.idle_animation = false
--		refresh_dicheveld_timer(self)
		if message.start == true then
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "acceleration", go.PLAYBACK_NONE)
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "acceleration", go.PLAYBACK_LOOP_FORWARD)
		else
			anim_idle(self)
		end
		change_rotation(self)
	elseif message_id == hash("hit") then
		if self.hit_animation == false then
			refresh_dicheveld_timer(self)
			self.idle_animation = false
--			self.disheveled_animation = true
			self.hit_animation = true
			change_rotation(self)
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "hit", go.PLAYBACK_NONE)
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "hit", go.PLAYBACK_ONCE_FORWARD, {}, anim_hit_done)
		end
	elseif message_id == hash("jump") then
--		self.running_animation = true
		self.jump_animation = message.start
		if message.start == true then
			self.idle_animation = false
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "disheveled", go.PLAYBACK_LOOP_FORWARD) -- jump animation
--			print('---> jump start')
		else
			anim_idle(self)
--			print('---> jump end')
		end
	elseif message_id == hash("running") then
		if message.start == true then
--			print('---> running')
			self.idle_animation = false
			self.running_animation = true
			spine.play_anim(self.weapon_stats[self.weapon_id].url, "disheveled", go.PLAYBACK_LOOP_FORWARD) -- jump animation
		else
--			print('---> stay')
			self.running_animation = false
			anim_idle(self)
		end
--	elseif message_id == hash("stay") then
--		print('---> stay')
--		self.running_animation = false
--		anim_idle(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
